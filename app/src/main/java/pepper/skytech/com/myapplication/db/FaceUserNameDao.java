package pepper.skytech.com.myapplication.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import pepper.skytech.com.myapplication.model.FaceUserName;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE_USER_NAME".
*/
public class FaceUserNameDao extends AbstractDao<FaceUserName, Long> {

    public static final String TABLENAME = "FACE_USER_NAME";

    /**
     * Properties of entity FaceUserName.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Face_id = new Property(1, String.class, "face_id", false, "FACE_ID");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property Pinyin_name = new Property(3, String.class, "pinyin_name", false, "PINYIN_NAME");
    }


    public FaceUserNameDao(DaoConfig config) {
        super(config);
    }
    
    public FaceUserNameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE_USER_NAME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FACE_ID\" TEXT," + // 1: face_id
                "\"USER_NAME\" TEXT," + // 2: user_name
                "\"PINYIN_NAME\" TEXT);"); // 3: pinyin_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE_USER_NAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FaceUserName entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String face_id = entity.getFace_id();
        if (face_id != null) {
            stmt.bindString(2, face_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String pinyin_name = entity.getPinyin_name();
        if (pinyin_name != null) {
            stmt.bindString(4, pinyin_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FaceUserName entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String face_id = entity.getFace_id();
        if (face_id != null) {
            stmt.bindString(2, face_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String pinyin_name = entity.getPinyin_name();
        if (pinyin_name != null) {
            stmt.bindString(4, pinyin_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FaceUserName readEntity(Cursor cursor, int offset) {
        FaceUserName entity = new FaceUserName( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // face_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // pinyin_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FaceUserName entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFace_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPinyin_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FaceUserName entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FaceUserName entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FaceUserName entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
